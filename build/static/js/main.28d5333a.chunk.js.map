{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["require","config","socket","App","useState","response","counter","setCounter","useEffect","socketIOClient","on","data","console","log","dateTime","onClick","emit","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAEAA,EAAQ,IAAUC,SAElB,IAEIC,EAAS,KAmCEC,MAjCf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACJC,EADI,aAEmBD,mBAAS,IAF5B,mBAEJE,EAFI,KAEKC,EAFL,KAsBX,OAlBAC,qBAAU,YACNN,EAAsGO,OAC/FC,GAAG,QAAQ,SAAAC,GACdC,QAAQC,IAAI,mBAAqBF,MAErCT,EAAOQ,GAAG,iBAAiB,SAAAC,GACvBC,QAAQC,IAAI,mBAAqBF,GACjCJ,EAAWI,QAEhB,IAUC,wCACS,sBAAMG,SAAUT,EAAhB,SAA2BA,IAChC,gCACI,4CAAeC,KACf,wBAAQS,QATpB,WACIb,EAAOc,KAAK,qBAQJ,+BCvBDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.28d5333a.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport socketIOClient from \"socket.io-client\";\nrequire('dotenv').config()\n\nconst ENDPOINT = process.env.NODE_ENV === 'production' ? null : \"http://localhost:4001\";\n\nlet socket = null;\n\nfunction App() {\n    const [response, setResponse] = useState(\"\");\n    const [counter, setCounter] = useState(0);\n\n    useEffect(() => {\n        socket = ENDPOINT ? socketIOClient(ENDPOINT, {transports: ['websocket', 'polling', 'flashsocket']}) : socketIOClient();\n        socket.on(\"Test\", data => {\n            console.log(\"Received info : \" + data);\n        });\n        socket.on(\"counterUpdate\", data => {\n            console.log(\"Received info : \" + data);\n            setCounter(data);\n        });\n    }, []);\n\n    /**\n     * Increase the state counter\n     */\n    function increaseCounter() {\n        socket.emit('incrementCounter');\n    }\n\n    return (\n        <div>\n            It's <time dateTime={response}>{response}</time>\n            <div>\n                <p>Compteur : {counter}</p>\n                <button onClick={increaseCounter}>Click me !</button>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}